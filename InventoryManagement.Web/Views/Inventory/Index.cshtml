@model InventoryManagement.Web.Models.Inventory.InventorySummary

@{
    ViewBag.Title = "title";
}

@section Styles
{
    <style type="text/css">
        .info {
            background-color: #d9edf7;
        }
    </style>
}
<br/>
<br/>

<h2>Inventory Management</h2>

<nav class="navbar navbar-inverse">
    <div class="container">
        <div class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li>@Html.ActionLink("Add Piece(s)", "AddPiece", "Inventory")</li>
                <li>@Html.ActionLink("Sell Piece(s)", "SellPiece", "Inventory")</li>
                <li>@Html.ActionLink("Add Carton(s)", "AddCarton", "Inventory")</li>
                <li>@Html.ActionLink("Sell Carton(s)", "SellCarton", "Inventory")</li>
            </ul>
        </div>
    </div>
</nav>


<div class="container">
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group">
                @Html.BootstrapLabel("ItemList")
                <div>
                    @Html.DropDownListFor(m => m.ItemId, @Model.ItemList, new { @class = "form-control" })
                    @Html.ValidationMessage("ItemList")
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-2 col-sm-offset-4">
            <div class="form-group">
                <button type="button" id="makeInventory" class="btn btn-info">Make Inventory</button>
            </div>
        </div>
    </div>

    <div class="row" id="processBlock" style="visibility: hidden;">
        <div class="col-md-12">
            <fieldset>
                <legend class="info">
                    Inventory Details
                </legend>
                <div class="row">
                    <div class="form-group">
                        @Html.BootstrapLabel("ItemName")
                        <div>
                            @Html.BootstrapReadOnlyTextBoxFor(x => x.ItemName)
                            @Html.ValidationMessage("ItemName")
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        @Html.BootstrapLabel("NumberOfPieces")
                        <div>
                            @Html.BootstrapReadOnlyTextBoxFor(x => x.NumberOfPieces)
                            @Html.ValidationMessage("NumberOfPieces")
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        @Html.BootstrapLabel("NumberOfCartons")
                        <div>
                            @Html.BootstrapReadOnlyTextBoxFor(x => x.NumberOfCartons)
                            @Html.ValidationMessage("NumberOfCartons")
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        @Html.BootstrapLabel("TotalPieces")
                        <div>
                            @Html.BootstrapReadOnlyTextBoxFor(x => x.TotalPieces)
                            @Html.ValidationMessage("TotalPieces")
                        </div>
                    </div>
                </div>

            </fieldset>

        </div>
    </div>
</div>





@section Scripts
{
    <script src="~/Scripts/jquery.blockUI.js"></script>

    <script type="text/javascript">

        $().ready(function () {

            var showBusyMessage = function () {
                $('#processBlock').block({ message: "<i class=\"ace-icon fa fa-spinner fa-spin orange\"></i> Loading.." });
            }

            var hideBusyMessage = function () {
                $('#processBlock').unblock();
            }

            $('#ItemId').on('change', function() {
                $('#processBlock').css({ 'visibility': 'hidden' });
            });

            $('#makeInventory').on('click', function () {

                var selectedItemId = $('#ItemId').val();

                if (selectedItemId === "") {
                    alert('please select a valid item');
                    return;
                }

                $('#processBlock').css({ 'visibility': 'visible' });

                $.ajax({
                    url: "@Url.Action("MakeInventory", "Inventory")",
                    type: "GET",
                    beforeSend: showBusyMessage,
                    complete: hideBusyMessage,
                    data: { itemId: selectedItemId },
                    dataType: 'json',
                    async: false,
                    success: function (data) {

                        if (data.InvetorySummary !== undefined) {
                            // Setup Values
                            $('#@Html.IdFor(x => x.ItemName)').val(data.InvetorySummary.ItemName);
                            $('#@Html.IdFor(x => x.NumberOfPieces)').val(data.InvetorySummary.NumberOfPieces);
                            $('#@Html.IdFor(x => x.NumberOfCartons)').val(data.InvetorySummary.NumberOfCartons);
                            $('#@Html.IdFor(x => x.TotalPieces)').val(data.InvetorySummary.TotalPieces);

                        } else {
                            alert(data.Message);
                        }

                    },
                    error: function (req, status, error) {
                        $alertAjaxError(req, status, "Coudn't Make Inventory for selected Item");
                    }
                });
            });




            function $alertAjaxError(jqXhr, status, logMsg) {
                var message;
                var statusErrorMap = {
                    '400': "Server understood the request, but request content was invalid.",
                    '401': "Unauthorized access.",
                    '403': "Forbidden resource can't be accessed.",
                    '500': "Internal server error.",
                    '503': "Service unavailable."
                };
                if (jqXhr.status) {
                    message = statusErrorMap[jqXhr.status];
                    if (!message) {
                        message = "Unknown Error \n.";
                    }
                } else if (status == 'parsererror') {
                    message = "Error.\nParsing JSON Request failed.";
                } else if (status == 'timeout') {
                    message = "Request Time out.";
                } else if (status == 'abort') {
                    message = "Request was aborted by the server";
                } else {
                    message = "Unknown Error \n.";
                }
                alert(message + ',' + logMsg);
            }

        });

    </script>
}

